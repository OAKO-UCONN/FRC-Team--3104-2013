/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/


//--------------------------------------------------//
//		######## ########    ###    ##     ##		//
//   	   ##    ##         ## ##   ###   ###		//
//   	   ##    ##        ##   ##  #### ####		//
//   	   ##    ######   ##     ## ## ### ##		//
//   	   ##    ##       ######### ##     ##		//
//   	   ##    ##       ##     ## ##     ##		//
//   	   ##    ######## ##     ## ##     ##		//
//													//
//		 #######     ##     #####   ##    ##		//
//		##     ##  ####    ##   ##  ##    ##		//
//		       ##    ##   ##     ## ##    ##		//
//		 #######     ##   ##     ## ##    ##		//
//		       ##    ##   ##     ## #########		//
//		##     ##    ##    ##   ##        ##		//
//		 #######   ######   #####         ##		//
//--------------------------------------------------//


//List Of All Of The Digital Sidecar Ports And What They Are Being Used For
//
//
//****Motor/PWM Ports****Start
//
//	Port 1: Talon For Right Drive Motor (1x CIM)
//	Port 2: Talon For Left Drive Motor (1x CIM)
//	Port 3: Empty
//	Port 4: Empty
//	Port 5: Empty
//	Port 6: Empty
//	Port 7: Empty
//	Port 8: Empty
//	Port 9: Empty
//	Port 10: Empty
//
//****Motor/PWM Ports****End
//
//
//****Relay/PWM Ports****Start
//
//	Port 1: Empty
//	Port 2: Empty
//	Port 3: Empty
//	Port 4: Empty
//	Port 5: Empty
//	Port 6: Empty
//	Port 7: Empty
//	Port 8: Empty
//
//****Relay/PWM Ports****End
//
//
//****Digital I/O Ports****Start
//
//	Port 1: Empty (For Pressure Sensor)
//	Port 2: Empty
//	Port 3: Empty
//	Port 4: Empty
//	Port 5: Empty
//	Port 6: Empty
//	Port 7: Empty
//	Port 8: Empty
//	Port 9: Empty
//	Port 10: Empty
//	Port 11: Empty
//	Port 12: Empty
//	Port 13: Empty
//	Port 14: Empty
//
//****Digital I/O Ports****End
//
//
//****Solenoid Ports****Start
//
//	Port 1: Empty
//	Port 2: Empty
//	Port 3: Empty
//	Port 4: Empty
//	Port 5: Empty
//	Port 6: Empty
//	Port 7: Empty
//	Port 8: Empty
//
//****Solenoid Ports****End
//
//
//
//
//
//














package edu.wpi.first.wpilibj.templates;
import edu.wpi.first.wpilibj.SimpleRobot; //import the classes for the SimpleRobot base class
import edu.wpi.first.wpilibj.Joystick; //import the classes for the Joystick
import edu.wpi.first.wpilibj.RobotDrive //import the classes for RobotDrive
import edu.wpi.first.wpilibj.Watchdog; //import the classes for the Watchdog



/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SimpleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class RobotTemplate extends SimpleRobot //This function is called once each time the robot enters autonomous mode.
	{


//******Variables For The Joysticks******Start

		Joystick leftStick  = new Joystick(1); //declare the left joystick
		Joystick rightStick = new Joystick(2); //declare the right joystick

//******Variables For The Joysticks******End

//******Variable For The Drive Type******Start

		RobotDrive mydrive = new RobotDrive(1,2); //declare the robot drive variable

//******Variable For The Drive Type******End




		public RobotTemplate() //not sure what this is for, but leaving it in for safety reasons because it deals with the Watchdog class
			{

				getWatchdog().setEnabled(false); //the Watchdog, don't forget to LEAVE IT EXACTALY HOW IT IS!!!!!!!!

			}

		public void robotInit() //run any code that only needs to be run once on cRIO boot
			{

//				compressor.start(); //start the compressor (left in for simplicity in case we decide to use it)
				Timer.delay(10.0); //delay of some sort (leaving it in so that it doesn't cause any conflicts

			}







    public void autonomous() {

    }

    /**
     * This function is called once each time the robot enters operator control.
     */
    public void operatorControl()  //code for tele-operated mode
    	{



//******Drive******Start

		mydrive.arcadeDrive(rightStick); //specify the type of drive/what joystick to use
		//mydrive.tankDrive(rightStick);
		//Timer.delay(0.0001); //old
		Timer.delay(0.005);

//******Drive******End






    	}

    /**
     * This function is called once each time the robot enters test mode.
     */
    public void test() {

    }
}
